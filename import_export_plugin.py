# -*- coding: utf-8 -*-
"""
/***************************************************************************

                       EING GML import/export plugin

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-20
        copyright            : (C) 2024 by Tigra Kft. & 2025 Zoltan Siki
 ***************************************************************************/
"""

import os.path

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsProject

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .import_plugin_dialog import ImportDialog
from .export_plugin_dialog import ExportDialog
from .load_plugin_dialog import LoadDialog
from .validate_plugin_dialog import ValidateDialog
from .gml_exporter import GmlExporter
from .gml_importer import GmlImporter
from .gpkg_loader import GpkgLoader
from .gml_validator import GmlValidator

class GmlImportExport:
    """QGIS E-Ing Export/import Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir, 'i18n',
                                   f'{locale}.qm')
        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr('E-ING &GML import / export')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.first_start_import = None
        self.first_start_export = None
        self.first_start_load = None
        self.first_start_validate = None
        self.dlg_import = None
        self.dlg_export = None
        self.dlg_load = None
        self.dlg_validate = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.
        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString
        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GmlImportExport', message)

    def add_action(self, icon_path, text, callback, enabled_flag=True,
                   add_to_menu=True, add_to_toolbar=True, status_tip=None,
                   whats_this=None, parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str
        :param text: Text that should be shown in menu items for this action.
        :type text: str
        :param callback: Function to be called when the action is triggered.
        :type callback: function
        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool
        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool
        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool
        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str
        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget
        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.
        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        action = QAction(text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if icon_path is not None:
            action.setIcon(QIcon(icon_path))

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        self.add_action(None, text=self.tr('Import'), callback=self.run_import,
                        parent=self.iface.mainWindow(), add_to_toolbar=False)
        self.add_action(None, text=self.tr('Export'), callback=self.run_export,
                        parent=self.iface.mainWindow(), add_to_toolbar=False)
        self.add_action(None, text=self.tr('Load'), callback=self.run_load,
                        parent=self.iface.mainWindow(), add_to_toolbar=False)
        self.add_action(None, text=self.tr('Validate'), callback=self.run_validate,
                        parent=self.iface.mainWindow(), add_to_toolbar=False)
        # will be set False in run()
        self.first_start_import = True
        self.first_start_export = True
        self.first_start_load = True
        self.first_start_validate = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.menu, action)
            self.iface.removeToolBarIcon(action)

    def run_import(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the
        # plugin is started
        if self.first_start_import:
            self.first_start_import = False
            self.dlg_import = ImportDialog()

        # is actual project empty?
        if len(QgsProject.instance().mapLayers().values()) > 0:
            resp = QMessageBox.question(None, self.tr("Warning"),
                                        self.tr("Project is not empty! Do you want to add layers from GML?"))
            if resp == QMessageBox.No:
                return
        # show the dialog
        self.dlg_import.show()
        # Run the dialog event loop
        result = self.dlg_import.exec_()

        # See if OK was pressed
        if result:
            importer = GmlImporter(self.iface)
            importer.import_to_geopackage(self.dlg_import.import_gml_path.filePath(),
                                          self.dlg_import.import_gpkg_path.filePath())

            if self.dlg_import.load_check.isChecked():
                # Load layers
                loader = GpkgLoader(self.iface)
                loader.load_layers(self.dlg_import.import_gpkg_path.filePath())

    def run_export(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start_export:
            self.first_start_export = False
            self.dlg_export = ExportDialog(self.tr)

        # fill geopackage source from opened project using first layer from a gepackage
        self.dlg_export.export_gpkg_path.setFilePath('')
        for lay in QgsProject.instance().mapLayers().values():
            src = lay.source()
            i = src.find(".gpkg|")
            if i > 0:
                self.dlg_export.export_gpkg_path.setFilePath(src[:i+5])
                break

        # show the dialog
        self.dlg_export.show()
        # Run the dialog event loop
        result = self.dlg_export.exec_()

        # See if OK was pressed
        if result:
            exporter = GmlExporter(self.iface)
            exporter.export_to_gml(self.dlg_export.export_gpkg_path.filePath(), self.dlg_export.export_gml_path.filePath())

    def run_load(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start_load:
            self.first_start_load = False
            self.dlg_load = LoadDialog(self.tr)

        # show the dialog
        self.dlg_load.show()
        # Run the dialog event loop
        result = self.dlg_load.exec_()
        # See if OK was pressed
        if result:
            loader = GpkgLoader(self.iface)
            loader.load_layers(self.dlg_load.gpkg_path.filePath())

    def run_validate(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start_validate:
            self.first_start_validate = False
            self.dlg_validate = ValidateDialog(self.tr)

        # show the dialog
        self.dlg_validate.show()
        # Run the dialog event loop
        result = self.dlg_validate.exec_()
        # See if OK was pressed
        if result:
            validator = GmlValidator(self.iface)
            validator.validate_gml(self.dlg_validate.gml.filePath())
