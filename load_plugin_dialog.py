# -*- coding: utf-8 -*-
"""
/***************************************************************************

                       EING GML import/export plugin

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-20
        copyright            : (C) 2024 by Tigra Kft. & Zoltan Siki
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the
# elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'load_plugin_dialog_base.ui'))


class LoadDialog(QtWidgets.QDialog, FORM_CLASS):
    """ Load all layers from GeoPackage and load styles from gml
    """
    def accept_load(self):
        """ check for empty field """
        if len(self.gpkg_path.filePath()) == 0:
            alert = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning,
                                          "Üres mező",
                                          "A GeoPackage mezőt ki kell tölteni!")
            alert.exec_()
            return
        self.accept()

    def __init__(self, parent=None):
        """Constructor."""
        super(LoadDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # disconnect default accept function and connect a custom one
        # with path validation
        self.button_box.accepted.disconnect(self.accept)
        self.button_box.accepted.connect(self.accept_load)
